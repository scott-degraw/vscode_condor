#!/bin/bash

# MIT License
#
# Copyright (c) 2025 Scott DeGraw
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# Default values
port=8080
code_executable="code"
sleep_interval=0.5

# Source config file if it exists
if [ -f "$HOME"/.config/vscode_condor_config ]; then
	# shellcheck disable=SC1091
	source "$HOME"/.config/vscode_condor_config
fi

set -u

script_name=$(basename "$0")

function usage() {
	function option_line() {
		printf "  %-20s %s\n" "$1" "$2" 
	}
	printf "Usage: %s [OPTION]... SUBMIT_SCRIPT\n" "$script_name"
	echo A simple script to run a VSCode server instance on a condor worker node.
	echo Options:
	option_line "-h, --help" "display this help message" 
	option_line "-p, --port" "port that the tunnel and vscode will run on"
	option_line "-s, --ssh_host" "ssh host to connect to"
	echo The worker node resources are defined in the condor submission script SUBMIT_SCRIPT.
}

options=$(getopt -o hp:s:n:b: --long help,port:,ssh_host:,batch_name: -n \'"$script_name"\' -- "$@")

# shellcheck disable=SC2181
if [ $? -ne 0 ]; then
	usage
	exit 1
fi

# Remove the annoying single quotes
options="${options//\'/}"

# shellcheck disable=SC2086
set -- $options

while [ $# -gt 0 ]; do
	case "$1" in
		-h|--help)
			usage
			exit 0 ;;
		-p|--port)
			port="$2"
			shift 2 ;;
		-s|--ssh_host)
			ssh_host="$2"
			shift 2 ;;
		-b|--batch_name)
			condor_batch_name="$2"
			shift 2 ;;
		--)
			shift
			break ;;
		*)
			echo "Error with getopt. Exiting" >&2
			exit 1 ;;
	esac
done

if [ $# -ne 1 ]; then 
	if [ $# -lt 1 ]; then
		echo "$script_name: need submission script" >&2
	else
		echo "$script_name: too many positional arguments" >&2
	fi
	echo "Try '$script_name --help' for more information"
	exit 1
fi

submit_template_file="$1"
shift 

host_user=$(ssh "$ssh_host" 'echo $USER')
vscode_server_dir=/home/$host_user/.vscode-server

submit_filename=$(basename "$submit_template_file")
submit_filename=/tmp/${submit_filename%.*}

# Perform the variable substitution into the template submit file
code_hash=$($code_executable -v | sed -n '2p')
code_server_exe=$vscode_server_dir/cli/servers/Stable-$code_hash/server/bin/code-server
if [ ! -f "$code_server_exe" ]; then
	echo "Using code-server $code_hash"
else
	echo "Error: code-server $code_hash not found. Please ssh into the \
login node with vscode to download correct vscode version." | fold -sw 80
	exit 1
fi
code_server_args="--port $port --without-connection-token --accept-server-license-terms"
condor_batch_name=$(sed -nE 's/batch_name[[:space:]]*=[[:space:]]*(.*)/\1/p' "$submit_template_file")

export code_server_exe
export code_server_args
envsubst < "$submit_template_file" > "$submit_filename"

# If already running get job id
job_id=$(ssh "$ssh_host" "condor_q ""$host_user"" -format \"%s,\" JobBatchName -format \"%d.\" ClusterID -format \"%d\n\" ProcID" \
| grep "$condor_batch_name" -m1 | cut -d, -f 2)

# If not running create job
if [ -z "$job_id" ]; then
	echo Transferring condor submit file 
	tmp_submit_file=/tmp/$(basename "$submit_filename")$(date +%s)
	scp "$submit_filename" "$ssh_host":"$tmp_submit_file" > /dev/null
	echo Submitting condor job
	# shellcheck disable=SC2029
	job_id=$(ssh "$ssh_host" condor_submit "$tmp_submit_file" | grep -oP "(?<=cluster )\d+(?=\.)")
fi

# Check for condor_ssh_to_job already running. If not start ssh tunnel to job from login node.
function condor_ssh_tunnel_check() {
	ssh "$ssh_host" netstat -tulpn 2>&1 | grep -q 127.0.0.1:"$port"
	return $?
}

if ! condor_ssh_tunnel_check; then
	echo Start condor ssh tunnel to job 
	ssh "$ssh_host" "condor_ssh_to_job -auto-retry ""$job_id"" -NfL localhost:""$port"":localhost:""$port" > /dev/null &
	condor_ssh_to_job_pid=$!
	while ! condor_ssh_tunnel_check; do
		sleep $sleep_interval
	done
	kill $condor_ssh_to_job_pid
fi

# Use autossh if available instead of ssh
if command -v autossh > /dev/null; then
	echo Using autossh
	tunnel_ssh_cmd='autossh -M 0'
else
	tunnel_ssh_cmd=ssh
fi

# Find any processes that are using the port  
tunnel_pids=$(netstat -tulpn 2>&1 | awk /"$port"/' { print $7 }' | grep -oE '^[0-9]+')
while IFS= read -r pid
do
	if ps -p "$pid" > /dev/null; then
		echo "Killing process $pid using port $port"
		kill "$pid"
	fi
done <<< "$tunnel_pids"

if [ -z "$tunnel_pids" ]; then
	echo Starting tunnel on port "$port"
else
	echo Restarting tunnel on port "$port"
fi

# Start the tunnel
$tunnel_ssh_cmd "$ssh_host" -NfL localhost:"$port":localhost:"$port"
# Wait until the tunnel is active before starting vscode
spinner=(/ - \\ \|)
i=0
while ! netstat -tulpn 2>&1 | grep -q "$port"; do
	printf "\r%s %s" "Waiting for tunnel to start" "${spinner[i++ % ${#spinner[@]}]}"
	sleep 0.2
done
printf "\nTunnel created\n"

# Finally, start vscode connecting to local tunnel 
echo Starting vscode
$code_executable --remote localhost:"$port" 
