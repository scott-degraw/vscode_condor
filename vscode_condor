#!/bin/bash

# MIT License
#
# Copyright (c) 2025 Scott DeGraw
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -euo pipefail

trap 'echo "Error in line ${LINENO}" >&2; echo "$BASH_COMMAND" >&2' ERR

# Default values
port=8080
code_executable="code"
sleep_interval=0.5
tunnel=false

# Source config file if it exists
if [ -f "$HOME"/.config/vscode_condor_config ]; then
	# shellcheck disable=SC1091
	source "$HOME"/.config/vscode_condor_config
fi

script_name=$(basename "$0")

function usage() {
	function option_line() {
		printf "  %-20s %s\n" "$1" "$2" 
	}
	printf "Usage: %s [OPTION]... SUBMIT_SCRIPT\n" "$script_name"
	echo A simple script to run a VSCode server instance on a condor worker node.
	echo Options:
	option_line "-h" "display this help message" 
	option_line "-t" "don't start vscode, just create/reestablish the tunnels. Useful when vscode is already running and tunnel connection is lost"
	option_line "-p" "port that the tunnel and vscode will run on"
	option_line "-s" "ssh host to connect to"
	echo The worker node resources are defined in the condor submission script SUBMIT_SCRIPT.
}

function check_empty_arg() {
	if [ -z "$2" ]; then
		echo "Error: Argument for '$1' cannot be empty." >&2
		exit 1
	fi
}

while getopts ":htp:s:" opt; do 
	case $opt in 
		h) usage; exit 0 ;;
		t) tunnel=true ;;
		p) 
			check_empty_arg "-p" "$OPTARG"
		    if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
				echo "Error: Port must be a number." >&2
				exit 1
		    fi
			port="$OPTARG" 
			;;
		s) 
			check_empty_arg "-s" "$OPTARG"
			ssh_host="$OPTARG" 
			;;
		\?) echo "Invalid option: -$OPTARG" >&2; exit 1 ;;
		:) echo "Option -$OPTARG requires an argument." >&2; exit 1 ;;
	esac
done
shift $((OPTIND - 1))

if [[ $# -gt 1 ]]; then
	echo "Too many positional argument: $#" >&2
	usage
	exit 1
fi

submit_template_file="$1"
shift 

host_user=$(ssh "$ssh_host" 'echo $USER')
vscode_server_dir=/home/$host_user/.vscode-server

submit_filename=$(basename "$submit_template_file")
submit_filename=/tmp/${submit_filename%.*}

# Perform the variable substitution into the template submit file
code_hash=$($code_executable -v | sed -n '2p')
code_server_exe=$vscode_server_dir/cli/servers/Stable-$code_hash/server/bin/code-server
if [ ! -f "$code_server_exe" ]; then
	echo "Using code-server $code_hash"
else
	echo "Error: code-server $code_hash not found. Please ssh into the \
login node with vscode to download correct vscode version." | fold -sw 80
	exit 1
fi
code_server_args="--port $port --without-connection-token --accept-server-license-terms"
condor_batch_name=$(sed -nE 's/batch_name[[:space:]]*=[[:space:]]*(.*)/\1/p' "$submit_template_file")

export code_server_exe
export code_server_args
envsubst < "$submit_template_file" > "$submit_filename"

# If already running get job id
condor_query=$(ssh "$ssh_host" "condor_q ""$host_user"" -format \"%s,\" JobBatchName -format \"%d.\" ClusterID -format \"%d\n\" ProcID")
n_job_matches=$(grep "$condor_batch_name" -c <<< "$condor_query" || true)
if [ "$n_job_matches" -gt 1 ]; then
	echo Multiple jobs with batch name: "$condor_batch_name" >&2
	exit 1
fi

# If not running create job
if [ "$n_job_matches" -eq 0 ]; then
	echo Transferring condor submit file 
	tmp_submit_file=/tmp/$(basename "$submit_filename")$(date +%s)
	scp "$submit_filename" "$ssh_host":"$tmp_submit_file" > /dev/null
	echo Submitting condor job
	# shellcheck disable=SC2029
	job_id=$(ssh "$ssh_host" condor_submit "$tmp_submit_file" | grep -oE 'cluster [0-9]+' | cut -d' ' -f2)
fi

# Check for condor_ssh_to_job already running. If not start ssh tunnel to job from login node.
function condor_ssh_tunnel_check() {
	ssh "$ssh_host" netstat -tulpn 2>&1 | grep -q 127.0.0.1:"$port"
	return $?
}

if ! condor_ssh_tunnel_check; then
	echo Start condor ssh tunnel to job 
	ssh "$ssh_host" "condor_ssh_to_job -auto-retry ""$job_id"" -NfL localhost:""$port"":localhost:""$port" > /dev/null &
	condor_ssh_to_job_pid=$!
	while ! condor_ssh_tunnel_check; do
		sleep $sleep_interval
	done
	kill $condor_ssh_to_job_pid
fi

# Use autossh if available instead of ssh
if command -v autossh > /dev/null; then
	echo Using autossh
	tunnel_ssh_cmd='autossh -M 0'
else
	tunnel_ssh_cmd=ssh
fi
tunnel_ssh_cmd=ssh

# Start the tunnel
tunnel_cmd="$tunnel_ssh_cmd $ssh_host -Nf -o ExitOnForwardFailure=yes -L localhost:$port:localhost:$port"
pid=$(pgrep -f "$tunnel_cmd" || true)
if [ "$pid" ]; then
	while IFS= read -r pid; do
		if ps -p "$pid" > /dev/null; then
			echo "Killing existing tunnel process with PID $pid using port $port"
			kill "$pid"
		fi
	done <<< "$pid"
fi

eval "$tunnel_cmd"
if [ $? -ne 0 ]; then
	echo "Error: Failed to create SSH tunnel." >&2
	exit 1
fi

if [[ "$tunnel" != true ]]; then
# Finally, start vscode connecting to local tunnel 
	echo Starting vscode
	$code_executable -n --remote localhost:"$port" 
fi
